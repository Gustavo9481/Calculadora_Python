{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Proyecto Calculadora Python","text":""},{"location":"#descripcion-general","title":"Descripci\u00f3n General","text":"<p>Proyecto Calculadora Python es una aplicaci\u00f3n de calculadora de escritorio construida con Python y el framework PyQt5 para su interfaz gr\u00e1fica de usuario. Ofrece operaciones aritm\u00e9ticas est\u00e1ndar con alta precisi\u00f3n y mantiene un historial de c\u00e1lculos. El proyecto enfatiza una arquitectura limpia y modular, haci\u00e9ndola f\u00e1cil de entender y mantener.</p>"},{"location":"#capturas-de-pantalla","title":"Capturas de Pantalla","text":""},{"location":"#interfaz-principal","title":"Interfaz Principal","text":"<p>Vista principal de la calculadora con botones num\u00e9ricos y operaciones b\u00e1sicas</p>"},{"location":"#caracteristicas","title":"Caracter\u00edsticas","text":"<ul> <li>Interfaz Gr\u00e1fica de Usuario (GUI): Interfaz intuitiva y responsiva impulsada por PyQt5.</li> <li>Operaciones Aritm\u00e9ticas Est\u00e1ndar:<ul> <li>Suma (+)</li> <li>Resta (-)</li> <li>Multiplicaci\u00f3n (\u00d7)</li> <li>Divisi\u00f3n (\u00f7)</li> <li>Porcentaje (%)</li> </ul> </li> <li>C\u00e1lculos de Alta Precisi\u00f3n: Utiliza el m\u00f3dulo <code>decimal</code> de Python para asegurar precisi\u00f3n, especialmente importante para c\u00e1lculos financieros o cient\u00edficos.</li> <li>Historial Persistente de C\u00e1lculos: Guarda autom\u00e1ticamente el historial de c\u00e1lculos en una base de datos SQLite local, permitiendo a los usuarios revisar operaciones pasadas.</li> <li>Arquitectura Modular: Separaci\u00f3n bien definida de responsabilidades entre la interfaz de usuario, la l\u00f3gica de c\u00e1lculo y las capas de persistencia de datos.</li> </ul>"},{"location":"#inicio-rapido","title":"Inicio R\u00e1pido","text":"<pre><code># Clonar el repositorio\ngit clone https://github.com/Gustavo9481/Calculadora_Python.git\ncd Calculadora_Python\n\n# Instalar uv (si no lo tienes)\ncurl -LsSf https://astral.sh/uv/install.sh | sh\nexport PATH=\"$HOME/.cargo/bin:$PATH\"\n\n# Crear entorno virtual e instalar dependencias\nuv venv\nsource .venv/bin/activate # En Windows: .venv\\Scripts\\activate\nuv pip install -e .\n\n# Ejecutar la aplicaci\u00f3n\npython main.py\n</code></pre>"},{"location":"#descripcion-de-la-arquitectura","title":"Descripci\u00f3n de la Arquitectura","text":"<p>La aplicaci\u00f3n est\u00e1 dise\u00f1ada con un enfoque modular, con componentes clave que incluyen:</p> <ul> <li><code>AppCalculator</code>: El orquestador principal de la aplicaci\u00f3n. Inicializa la UI y la conexi\u00f3n a la base de datos, actuando como una Fachada para simplificar el proceso de inicio.</li> <li>Componentes de UI (<code>InterfaceCreator</code>, <code>ButtonsCreator</code>, <code>ScreensCreator</code>): Estas clases son responsables de construir y manejar los diversos elementos de la interfaz gr\u00e1fica basada en PyQt5.</li> <li><code>Calculator</code>: Una clase utilitaria sin estado que proporciona m\u00e9todos est\u00e1ticos para todas las operaciones aritm\u00e9ticas. Utiliza <code>Decimal</code> para precisi\u00f3n y <code>lru_cache</code> para optimizaci\u00f3n de rendimiento.</li> <li><code>HistoryManager</code>: Maneja todas las interacciones con la base de datos SQLite para almacenar y recuperar el historial de c\u00e1lculos. Est\u00e1 implementado como un Singleton para asegurar una sola conexi\u00f3n a la base de datos.</li> <li><code>HistoryTableDB</code>: Un Objeto de Transferencia de Datos (DTO) utilizado para manejar registros del historial.</li> </ul> <p>Se emplean varios patrones de dise\u00f1o para mejorar la estructura y mantenibilidad del c\u00f3digo: *   Patr\u00f3n Fachada: Utilizado por <code>AppCalculator</code> para proporcionar una interfaz simplificada a los subsistemas complejos de inicializaci\u00f3n de UI y base de datos. *   Patr\u00f3n Singleton: Asegura que <code>HistoryManager</code> tenga solo una instancia, gestionando el acceso a la base de datos de forma centralizada. *   Clase Utilitaria Sin Estado: La clase <code>Calculator</code> agrupa funciones aritm\u00e9ticas relacionadas sin mantener ning\u00fan estado interno.</p>"},{"location":"#stack-tecnologico","title":"Stack Tecnol\u00f3gico","text":"<ul> <li>Lenguaje de Programaci\u00f3n: Python (versi\u00f3n 3.8 o superior)</li> <li>Framework GUI: PyQt5</li> <li>Gestor de Dependencias: uv</li> <li>Base de Datos: SQLite (a trav\u00e9s del m\u00f3dulo integrado <code>sqlite3</code> de Python)</li> <li>Aritm\u00e9tica de Precisi\u00f3n: M\u00f3dulo <code>decimal</code> de Python</li> <li>Cach\u00e9: <code>functools.lru_cache</code> para optimizar c\u00e1lculos</li> <li>Pydantic: Para la validaci\u00f3n y gesti\u00f3n de datos estructurados.</li> </ul>"},{"location":"#prerrequisitos","title":"Prerrequisitos","text":"<p>Antes de ejecutar la aplicaci\u00f3n, aseg\u00farate de tener instalado lo siguiente:</p> <ul> <li>Python 3.8 o m\u00e1s reciente</li> <li>uv (gestor de paquetes y entorno virtual)</li> </ul>"},{"location":"#instalacion","title":"Instalaci\u00f3n","text":"<ol> <li> <p>Clonar el repositorio (si aplica): <pre><code>git clone https://github.com/Gustavo9481/Calculadora_Python.git\ncd Calculadora_Python\n</code></pre>     Si tienes los archivos localmente, navega al directorio ra\u00edz del proyecto.</p> </li> <li> <p>Instalar uv (si no lo tienes): <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n# Aseg\u00farate de que uv est\u00e9 en tu PATH. Por ejemplo, para bash/zsh:\n# export PATH=\"$HOME/.cargo/bin:$PATH\"\n</code></pre></p> </li> <li> <p>Crear entorno virtual e instalar dependencias:</p> <pre><code>uv venv\nsource .venv/bin/activate # En Windows: .venv\\Scripts\\activate\nuv pip install -e .\n</code></pre> </li> </ol>"},{"location":"#uso","title":"Uso","text":"<p>Para ejecutar la aplicaci\u00f3n calculadora, ejecuta el script principal desde el directorio ra\u00edz del proyecto:</p> <pre><code>python main.py\n</code></pre>"},{"location":"#operaciones-basicas","title":"Operaciones B\u00e1sicas","text":"<ul> <li>N\u00fameros: Haz clic en los botones num\u00e9ricos para ingresar n\u00fameros</li> <li>Operaciones: Usa +, -, \u00d7, \u00f7 para operaciones b\u00e1sicas</li> <li>Porcentaje: Usa el bot\u00f3n % para c\u00e1lculos de porcentaje</li> <li>Historial: Accede al historial desde el men\u00fa Ver &gt; Historial</li> </ul>"},{"location":"#estructura-del-proyecto","title":"Estructura del Proyecto","text":""},{"location":"#documentacion","title":"Documentaci\u00f3n","text":"<p>Este proyecto utiliza MkDocs para generar documentaci\u00f3n. Puedes encontrar informaci\u00f3n detallada sobre clases, m\u00e9todos y arquitectura en el directorio <code>docs</code>.</p> <p>Para servir la documentaci\u00f3n localmente:</p> <ol> <li>Instalar MkDocs y el tema Material (si no se ha hecho ya, usando uv): <pre><code>uv pip install mkdocs mkdocs-material\n</code></pre></li> <li>Servir la documentaci\u00f3n:     Desde el directorio ra\u00edz del proyecto, ejecuta:     <pre><code>mkdocs serve\n</code></pre>     Esto iniciar\u00e1 un servidor local, y podr\u00e1s ver la documentaci\u00f3n en tu navegador web (usualmente en <code>http://127.0.0.1:8000</code>).</li> </ol> <p>Para construir el sitio de documentaci\u00f3n est\u00e1tica: <pre><code>mkdocs build\n</code></pre></p>"},{"location":"#roadmap","title":"Roadmap","text":""},{"location":"#version-actual-106","title":"Versi\u00f3n Actual (1.0.6)","text":"<ul> <li>[x] Operaciones aritm\u00e9ticas b\u00e1sicas (+, -, \u00d7, \u00f7)</li> <li>[x] C\u00e1lculos de porcentaje</li> <li>[x] Historial persistente de c\u00e1lculos</li> <li>[x] Interfaz gr\u00e1fica con PyQt5</li> <li>[x] Arquitectura modular</li> <li>[x] Binarios precompilados para Linux y Windows (v\u00eda GitHub Actions)</li> </ul>"},{"location":"#proximas-versiones","title":"Pr\u00f3ximas Versiones","text":"<ul> <li>[ ] v1.1.0 - Calculadora Python</li> <li>[ ] Temas personalizables (claro/oscuro)</li> <li>[ ] Interfaz para historial de operaciones</li> </ul>"},{"location":"#problemas-conocidos","title":"Problemas Conocidos","text":"<ul> <li>Windows 7: Puede requerir instalaci\u00f3n manual de Visual C++ Redistributable</li> <li>Divisi\u00f3n por cero: Muestra mensaje de error est\u00e1ndar, considerar implementar manejo m\u00e1s elegante</li> <li>N\u00fameros muy grandes: El rendimiento puede verse afectado con n\u00fameros extremadamente grandes (&gt;1000 d\u00edgitos)</li> <li>PyQt6: Algunas importaciones pueden necesitar ajustes menores al migrar desde PyQt5</li> </ul>"},{"location":"#contribucion","title":"Contribuci\u00f3n","text":"<p>\u00a1Las contribuciones son bienvenidas! Aqu\u00ed te explicamos c\u00f3mo puedes ayudar:</p>"},{"location":"#proceso-de-contribucion","title":"Proceso de Contribuci\u00f3n","text":"<ol> <li>Fork el proyecto</li> <li>Crea una rama para tu feature (<code>git checkout -b feature/CaracteristicaIncreible</code>)</li> <li>Commit tus cambios (<code>git commit -m 'Agregar CaracteristicaIncreible'</code>)</li> <li>Push a la rama (<code>git push origin feature/CaracteristicaIncreible</code>)</li> <li>Abre un Pull Request</li> </ol>"},{"location":"#tipos-de-contribuciones","title":"Tipos de Contribuciones","text":"<ul> <li>\ud83d\udc1b Reportar bugs - Crea un issue describiendo el problema</li> <li>\ud83d\udca1 Sugerir features - Prop\u00f3n nuevas caracter\u00edsticas</li> <li>\ud83d\udcdd Mejorar documentaci\u00f3n - Ayuda a hacer la documentaci\u00f3n m\u00e1s clara</li> <li>\ud83d\udd27 Escribir c\u00f3digo - Implementa nuevas funcionalidades o arregla bugs</li> <li>\ud83e\uddea Escribir tests - Mejora la cobertura de pruebas</li> </ul>"},{"location":"#guias-de-contribucion","title":"Gu\u00edas de Contribuci\u00f3n","text":"<ul> <li>Sigue las convenciones de c\u00f3digo Python (PEP 8)</li> <li>Escribe tests para nuevas funcionalidades</li> <li>Actualiza la documentaci\u00f3n cuando sea necesario</li> <li>Usa mensajes de commit descriptivos</li> </ul>"},{"location":"#configuracion-del-entorno-de-desarrollo","title":"Configuraci\u00f3n del Entorno de Desarrollo","text":"<pre><code># Clonar tu fork\ngit clone https://github.com/Gustavo9481/Calculadora_Python.git \ncd Calculadora_Python\n\n# Crear entorno virtual con uv\nuv venv\nsource .venv/bin/activate  # En Windows: .venv\\Scripts\\activate\n\n# Instalar dependencias de desarrollo (incluye pytest, flake8, pylint, mkdocs)\nuv pip install -e .[dev]\n\n# Ejecutar tests\npython -m pytest tests/\n</code></pre>"},{"location":"#licencia","title":"Licencia","text":"<p>Este proyecto est\u00e1 licenciado bajo la Licencia MIT - consulta el archivo LICENSE para m\u00e1s detalles.</p>"},{"location":"#resumen-de-la-licencia-mit","title":"Resumen de la Licencia MIT","text":"<ul> <li>\u2705 Uso comercial permitido</li> <li>\u2705 Modificaci\u00f3n permitida</li> <li>\u2705 Distribuci\u00f3n permitida</li> <li>\u2705 Uso privado permitido</li> <li>\u274c Sin garant\u00eda</li> <li>\u274c El autor no es responsable por da\u00f1os</li> </ul>"},{"location":"#autores","title":"Autores","text":"<ul> <li>[GUScode | Gustavo Colmenares] - Desarrollo inicial y mantenimiento - Gustavo9481</li> </ul>"},{"location":"#descargas","title":"Descargas","text":"<p>Puedes descargar las versiones precompiladas de la calculadora para tu sistema operativo desde la p\u00e1gina de GitHub Releases.</p> <ul> <li>Linux: <code>calculadora-linux.tar.gz</code></li> <li>Windows: <code>calculadora-windows.zip</code></li> </ul>"},{"location":"#agradecimientos","title":"Agradecimientos","text":"<ul> <li>Inspirado por la calculadora est\u00e1ndar de Android.</li> <li>Iconos proporcionados por Phosphoricons</li> <li>Documentaci\u00f3n mejorada gracias a MkDocs Material</li> <li>Comunidad de Python por las excelentes librer\u00edas utilizadas</li> </ul> <p> \u00bfTe gusta el proyecto? \u00a1Dale una \u2b50 en GitHub! </p> <p>   Hecho con \u2764\ufe0f por la comunidad de desarrolladores Python </p>"},{"location":"license/","title":"Info","text":"<p>MIT License</p> <p>Copyright (c) 2025 Gustavo Colmenares</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"clases/AppCalculator_doc/","title":"Clase <code>AppCalculator</code>","text":"<p>La clase <code>AppCalculator</code> es el punto de entrada principal de la aplicaci\u00f3n de la calculadora. Su funci\u00f3n es inicializar y gestionar la aplicaci\u00f3n, coordinando la interfaz gr\u00e1fica y la base de datos del historial.</p>"},{"location":"clases/AppCalculator_doc/#funcionalidad","title":"Funcionalidad","text":"<ul> <li>Inicializaci\u00f3n de la Aplicaci\u00f3n: Crea la instancia de la interfaz gr\u00e1fica (<code>InterfaceCreator</code>) y el gestor de la base de datos (<code>HistoryManager</code>).</li> <li>Gesti\u00f3n de la Base de Datos: Se asegura de que la tabla del historial exista en la base de datos al iniciar la aplicaci\u00f3n.</li> <li>Ejecuci\u00f3n de la Interfaz: Inicia el bucle de eventos de la aplicaci\u00f3n Qt para mostrar la ventana principal y gestionar las interacciones del usuario.</li> </ul>"},{"location":"clases/AppCalculator_doc/#atributos","title":"Atributos","text":"Atributo Tipo Descripci\u00f3n <code>interface</code> <code>InterfaceCreator</code> Instancia de la interfaz gr\u00e1fica de la calculadora. <code>history_db</code> <code>HistoryManager</code> Instancia del gestor de la base de datos del historial."},{"location":"clases/AppCalculator_doc/#metodos","title":"M\u00e9todos","text":""},{"location":"clases/AppCalculator_doc/#main","title":"<code>main()</code>","text":"<p>Este m\u00e9todo es el punto de entrada que inicia la ejecuci\u00f3n de la aplicaci\u00f3n.</p> <ul> <li>Responsabilidad:</li> <li>Llama a <code>create_table()</code> en la instancia de <code>history_db</code> para asegurar que la tabla del historial est\u00e9 lista.</li> <li> <p>Llama a <code>run()</code> en la instancia de <code>interface</code> para mostrar la ventana principal e iniciar el bucle de eventos de Qt.</p> </li> <li> <p>Par\u00e1metros: No recibe ning\u00fan par\u00e1metro.</p> </li> <li>Retorno: No retorna ning\u00fan valor (<code>None</code>).</li> </ul>"},{"location":"clases/AppCalculator_doc/#diagrama-uml","title":"Diagrama UML","text":""},{"location":"clases/AppCalculator_doc/#ejemplo-de-uso","title":"Ejemplo de Uso","text":"<p>Para iniciar la aplicaci\u00f3n, se crea una instancia de <code>AppCalculator</code> y se llama a su m\u00e9todo <code>main()</code>:</p> <pre><code>if __name__ == \"__main__\":\n    app = AppCalculator()\n    app.main()\n</code></pre>"},{"location":"clases/ButtonsCreator_doc/","title":"Clase <code>ButtonsCreator</code>","text":"<p>La clase <code>ButtonsCreator</code> es responsable de crear y gestionar todos los botones de la interfaz de la calculadora. Utiliza un enfoque similar al patr\u00f3n Factory Method para generar los botones y asignarles su funcionalidad correspondiente.</p>"},{"location":"clases/ButtonsCreator_doc/#funcionalidad","title":"Funcionalidad","text":"<ul> <li>Creaci\u00f3n de Botones: Genera todos los botones de la calculadora (n\u00fameros, operadores, funciones especiales) y los organiza en un <code>QGridLayout</code>.</li> <li>Asignaci\u00f3n de Funciones: Conecta cada bot\u00f3n a su funci\u00f3n correspondiente (por ejemplo, <code>insert_value</code>, <code>insert_operator</code>, <code>calculate_result</code>).</li> <li>Gesti\u00f3n del Estado: Mantiene el estado actual de la calculadora a trav\u00e9s de la clase <code>CalculatorState</code>, que almacena los valores, el operador y el resultado.</li> <li>Interacci\u00f3n con la Base de Datos: Utiliza una instancia de <code>HistoryManager</code> para guardar el historial de c\u00e1lculos en la base de datos.</li> </ul>"},{"location":"clases/ButtonsCreator_doc/#atributos","title":"Atributos","text":"Atributo Tipo Descripci\u00f3n <code>central_widget</code> <code>QWidget</code> Widget central donde se colocan los botones. <code>display_value_1</code> <code>QLabel</code> Pantalla para el primer valor. <code>display_value_2</code> <code>QLabel</code> Pantalla para el segundo valor. <code>display_operator</code> <code>QLabel</code> Pantalla para el operador. <code>display_result</code> <code>QLabel</code> Pantalla para el resultado. <code>state</code> <code>CalculatorState</code> Estado actual de la calculadora. <code>buttons</code> <code>Dict[str, QPushButton]</code> Diccionario de los botones creados. <code>history_manager</code> <code>HistoryManager</code> Instancia para gestionar el historial."},{"location":"clases/ButtonsCreator_doc/#metodos-principales","title":"M\u00e9todos Principales","text":""},{"location":"clases/ButtonsCreator_doc/#create_buttons-qgridlayout","title":"<code>create_buttons() -&gt; QGridLayout</code>","text":"<p>Crea y configura todos los botones de la calculadora, los a\u00f1ade a un layout de rejilla y conecta sus se\u00f1ales <code>clicked</code> a las funciones correspondientes.</p>"},{"location":"clases/ButtonsCreator_doc/#insert_valuevalue-str","title":"<code>insert_value(value: str)</code>","text":"<p>Inserta un valor num\u00e9rico o un punto decimal en la pantalla. Se encarga de validar que no se inserte m\u00e1s de un punto decimal por n\u00famero.</p>"},{"location":"clases/ButtonsCreator_doc/#insert_operatoroperator-str","title":"<code>insert_operator(operator: str)</code>","text":"<p>Inserta un operador en la pantalla. Si ya hay una operaci\u00f3n en curso, calcula el resultado antes de insertar el nuevo operador.</p>"},{"location":"clases/ButtonsCreator_doc/#calculate_resultvalue-str","title":"<code>calculate_result(value: str)</code>","text":"<p>Realiza el c\u00e1lculo utilizando la clase <code>Calculator</code>, muestra el resultado en la pantalla y guarda la operaci\u00f3n en el historial de la base de datos.</p>"},{"location":"clases/ButtonsCreator_doc/#clear_screenvalue-str","title":"<code>clear_screen(value: str)</code>","text":"<p>Limpia todas las pantallas y reinicia el estado de la calculadora.</p>"},{"location":"clases/ButtonsCreator_doc/#delete_last_charvalue-str","title":"<code>delete_last_char(value: str)</code>","text":"<p>Elimina el \u00faltimo car\u00e1cter de la entrada actual.</p>"},{"location":"clases/ButtonsCreator_doc/#diagrama-uml","title":"Diagrama UML","text":""},{"location":"clases/Calculator_doc/","title":"Clase <code>Calculator</code>","text":"<p>La clase <code>Calculator</code> proporciona m\u00e9todos est\u00e1ticos para realizar operaciones aritm\u00e9ticas b\u00e1sicas (suma, resta, multiplicaci\u00f3n, divisi\u00f3n y porcentaje).</p> <p>Su dise\u00f1o se centra en la precisi\u00f3n, el rendimiento y la seguridad, utilizando el tipo <code>Decimal</code> en un entorno controlado para evitar efectos secundarios.</p>"},{"location":"clases/Calculator_doc/#funcionalidad-y-diseno","title":"Funcionalidad y Dise\u00f1o","text":"<ul> <li>Precisi\u00f3n Controlada: A trav\u00e9s del decorador <code>use_precision</code>, todos los c\u00e1lculos se ejecutan dentro de un contexto local con una precisi\u00f3n de 28 d\u00edgitos. Esto garantiza resultados exactos sin modificar el estado de precisi\u00f3n global de la aplicaci\u00f3n, haciendo la clase autocontenida y robusta.</li> <li>C\u00e1lculos Optimizados: Cada m\u00e9todo de operaci\u00f3n est\u00e1 decorado con <code>@lru_cache</code> para almacenar en cach\u00e9 los resultados. Esto mejora significativamente el rendimiento cuando se repiten las mismas operaciones.</li> <li>Dise\u00f1o sin Estado (Stateless): La clase no almacena ning\u00fan estado interno entre llamadas. Cada operaci\u00f3n es independiente, lo que la hace predecible y segura para usar en entornos concurrentes (thread-safe).</li> </ul>"},{"location":"clases/Calculator_doc/#atributos-de-clase","title":"Atributos de Clase","text":"Atributo Tipo Descripci\u00f3n <code>_PRECISION</code> <code>int</code> Define la precisi\u00f3n decimal (28 d\u00edgitos) utilizada en todos los c\u00e1lculos."},{"location":"clases/Calculator_doc/#metodos","title":"M\u00e9todos","text":"<p>Todos los m\u00e9todos son est\u00e1ticos y est\u00e1n decorados con <code>@use_precision</code> y <code>@lru_cache</code>.</p> M\u00e9todo Par\u00e1metros Retorno Descripci\u00f3n <code>add</code> <code>value_1: Decimal</code>, <code>value_2: Decimal</code> <code>Decimal</code> Suma dos n\u00fameros decimales. <code>subtract</code> <code>value_1: Decimal</code>, <code>value_2: Decimal</code> <code>Decimal</code> Resta dos n\u00fameros decimales. <code>multiply</code> <code>value_1: Decimal</code>, <code>value_2: Decimal</code> <code>Decimal</code> Multiplica dos n\u00fameros decimales. <code>divide</code> <code>value_1: Decimal</code>, <code>value_2: Decimal</code> <code>Decimal</code> Divide dos n\u00fameros decimales. <code>percent</code> <code>value_1: Decimal</code>, <code>value_2: Decimal</code> <code>Decimal</code> Calcula el porcentaje de un n\u00famero."},{"location":"clases/Calculator_doc/#diagrama-uml","title":"Diagrama UML","text":""},{"location":"clases/Calculator_doc/#ejemplo-de-uso","title":"Ejemplo de Uso","text":"<p>El uso de la clase no cambia, ya que la gesti\u00f3n de la precisi\u00f3n es interna.</p> <pre><code>from decimal import Decimal\nfrom calculator import Calculator\n\n# Suma\nresultado_suma = Calculator.add(Decimal('10.5'), Decimal('5.2'))\nprint(f\"Suma: {resultado_suma}\")  # Salida: Suma: 15.7\n\n# Divisi\u00f3n\ntry:\n    resultado_division = Calculator.divide(Decimal('10'), Decimal('3'))\n    print(f\"Divisi\u00f3n: {resultado_division}\")\nexcept ZeroDivisionError as e:\n    print(e)\n</code></pre>"},{"location":"clases/HistoryManager_doc/","title":"Clase <code>HistoryManager</code>","text":"<p>La clase <code>HistoryManager</code> gestiona todas las operaciones de la base de datos para el historial de la calculadora. Implementa el patr\u00f3n de dise\u00f1o Singleton para garantizar que solo exista una \u00fanica instancia de esta clase, evitando as\u00ed m\u00faltiples conexiones a la base de datos.</p>"},{"location":"clases/HistoryManager_doc/#funcionalidad","title":"Funcionalidad","text":"<ul> <li>Patr\u00f3n Singleton: Asegura una \u00fanica instancia de <code>HistoryManager</code> para toda la aplicaci\u00f3n.</li> <li>Gesti\u00f3n de la Base de Datos: Maneja la creaci\u00f3n de la tabla, la inserci\u00f3n de nuevos registros, la eliminaci\u00f3n del historial y la consulta de los \u00faltimos registros.</li> <li>Decorador <code>gestor_database</code>: Simplifica el manejo de la conexi\u00f3n y el cursor de la base de datos, abriendo y cerrando la conexi\u00f3n autom\u00e1ticamente y manejando posibles errores.</li> </ul>"},{"location":"clases/HistoryManager_doc/#atributos","title":"Atributos","text":"Atributo Tipo Descripci\u00f3n <code>_instance</code> <code>HistoryManager</code> Almacena la \u00fanica instancia de la clase (Singleton). <code>_db_path</code> <code>Path</code> Ruta al archivo de la base de datos (<code>calculator_db.db</code>)."},{"location":"clases/HistoryManager_doc/#metodos","title":"M\u00e9todos","text":""},{"location":"clases/HistoryManager_doc/#__new__","title":"<code>__new__()</code>","text":"<p>Implementa el patr\u00f3n Singleton. Si no existe una instancia de <code>HistoryManager</code>, crea una nueva; de lo contrario, devuelve la instancia existente.</p>"},{"location":"clases/HistoryManager_doc/#create_table","title":"<code>create_table()</code>","text":"<p>Crea la tabla <code>history_results</code> en la base de datos si no existe. Esta tabla almacena la ecuaci\u00f3n y el resultado de cada operaci\u00f3n.</p>"},{"location":"clases/HistoryManager_doc/#new_historyhistory_equation-str-history_result-decimal","title":"<code>new_history(history_equation: str, history_result: Decimal)</code>","text":"<p>Agrega un nuevo registro al historial en la base de datos. Toma la ecuaci\u00f3n y el resultado como par\u00e1metros.</p>"},{"location":"clases/HistoryManager_doc/#delete_history","title":"<code>delete_history()</code>","text":"<p>Elimina todos los registros de la tabla <code>history_results</code>.</p>"},{"location":"clases/HistoryManager_doc/#get_last_recordslimit-int-5-list","title":"<code>get_last_records(limit: int = 5) -&gt; list</code>","text":"<p>Obtiene los \u00faltimos registros del historial, ordenados de forma descendente. Por defecto, devuelve los \u00faltimos 5 registros.</p>"},{"location":"clases/HistoryManager_doc/#diagrama-uml","title":"Diagrama UML","text":""},{"location":"clases/HistoryManager_doc/#decorador-gestor_database","title":"Decorador <code>gestor_database</code>","text":"<p>Este decorador se encarga de la gesti\u00f3n de la conexi\u00f3n a la base de datos. Envuelve los m\u00e9todos que interact\u00faan con la base de datos y se encarga de:</p> <ol> <li>Abrir la conexi\u00f3n a la base de datos.</li> <li>Crear un cursor.</li> <li>Ejecutar la funci\u00f3n decorada, pas\u00e1ndole el cursor.</li> <li>Cerrar el cursor y la conexi\u00f3n.</li> <li>Manejar cualquier <code>sqlite3.Error</code> que pueda ocurrir.</li> </ol>"},{"location":"clases/HistoryTableDB_doc/","title":"Clase HistoryTableDB","text":""},{"location":"clases/HistoryTableDB_doc/#proposito-y-responsabilidad","title":"Prop\u00f3sito y Responsabilidad","text":"<p>La clase <code>HistoryTableDB</code> tiene como responsabilidad principal encapsular la informaci\u00f3n necesaria para registrar operaciones matem\u00e1ticas (ecuaci\u00f3n y resultado) en la base de datos. Act\u00faa como un Data Transfer Object (DTO) validado por Pydantic, asegurando que cada instancia cumpla con el esquema definido antes de ser utilizada en otros componentes.</p>"},{"location":"clases/HistoryTableDB_doc/#caracteristicas-principales","title":"Caracter\u00edsticas principales","text":"<ul> <li> <p>Validaci\u00f3n de datos: Hereda de <code>BaseModel</code> de Pydantic, lo que garantiza que los atributos <code>equation</code> y <code>result</code> respeten los tipos esperados (<code>str</code> y <code>Decimal</code>).</p> </li> <li> <p>Representaci\u00f3n clara: Incluye el m\u00e9todo <code>__str__</code> para mostrar la ecuaci\u00f3n junto con su resultado en un formato legible (\"<code>&lt;ecuaci\u00f3n&gt; = &lt;resultado&gt;</code>\").</p> </li> <li> <p>Ligereza: No contiene l\u00f3gica de negocio ni acceso directo a la base de datos; solo almacena y valida datos.</p> </li> </ul>"},{"location":"clases/HistoryTableDB_doc/#patron-de-diseno-aplicado","title":"Patr\u00f3n de Dise\u00f1o aplicado","text":"<p>Se aplica el patr\u00f3n DTO (Data Transfer Object) o Value Object:</p> <ul> <li> <p>DTO (Data Transfer Object): Se utiliza para transportar datos entre capas de la aplicaci\u00f3n (por ejemplo, desde la capa de c\u00e1lculo hasta la capa de persistencia), sin exponer l\u00f3gica de negocio.</p> </li> <li> <p>Value Object: Objetos inmutables (en este caso, controlados por Pydantic), cuyo estado se define en el momento de la creaci\u00f3n y no cambia a lo largo de su ciclo de vida.</p> </li> </ul>"},{"location":"clases/HistoryTableDB_doc/#implementacion-del-patron","title":"Implementaci\u00f3n del patr\u00f3n","text":"<pre><code>from decimal import Decimal\nfrom pydantic import BaseModel\n\n\nclass HistoryTableDB(BaseModel):\n\n    equation: str = None\n    result: Decimal = None\n\n    def __str__(self) -&gt; str:\n\n        return f\"{self.equation} = {self.result}\"\n</code></pre>"},{"location":"clases/HistoryTableDB_doc/#por-que-este-patron-y-sus-ventajas","title":"Por qu\u00e9 este patr\u00f3n y sus ventajas","text":"<ul> <li> <p>Separaci\u00f3n de responsabilidades: El DTO desacopla la validaci\u00f3n y el transporte de datos de la l\u00f3gica de negocio y del acceso a la base de datos. As\u00ed, cada capa (presentaci\u00f3n, negocio, persistencia) se mantiene independiente.</p> </li> <li> <p>Validaci\u00f3n autom\u00e1tica: Al heredar de <code>BaseModel</code>, Pydantic valida tipos y formatos al instanciar, reduciendo errores tempranos por datos inv\u00e1lidos.</p> </li> <li> <p>Inmutabilidad controlada: Aunque Pydantic permite mutaci\u00f3n, el dise\u00f1o de DTO fomenta tratar instancias como valores inmutables una vez creadas, lo que facilita pruebas y depuraci\u00f3n.</p> </li> <li> <p>Claridad en el contrato de datos: La definici\u00f3n expl\u00edcita de atributos (<code>equation: str</code>, <code>result: Decimal</code>) sirve como documentaci\u00f3n viva, clarificando qu\u00e9 campos son obligatorios y sus tipos.</p> </li> </ul>"},{"location":"clases/HistoryTableDB_doc/#diagrama-uml","title":"Diagrama UML","text":""},{"location":"clases/HistoryTableDB_doc/#metodos-principales","title":"M\u00e9todos principales","text":"<ul> <li> <p><code>__init__(self, equation: str, result: Decimal)</code>:     Constructor generado por Pydantic. Recibe la ecuaci\u00f3n y el resultado; valida tipos autom\u00e1ticamente.</p> </li> <li> <p><code>__str__(self) -&gt; str</code>:     Retorna la representaci\u00f3n en cadena de la operaci\u00f3n, \u00fatil para mostrar o registrar logs.</p> </li> </ul> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"\n    Devuelve la representaci\u00f3n en cadena de la operaci\u00f3n.\n\n    :returns: Cadena con el formato \"&lt;ecuaci\u00f3n&gt; = &lt;resultado&gt;\".\n    :rtype: str\n    \"\"\"\n    return f\"{self.equation} = {self.result}\"\n</code></pre>"},{"location":"clases/HistoryTableDB_doc/#dependencias","title":"Dependencias","text":"<ul> <li>Python \u2265 3.7</li> <li>pydantic<ul> <li>Para validaci\u00f3n de modelos y generaci\u00f3n autom\u00e1tica del constructor.</li> <li>Instalaci\u00f3n:     <pre><code># pip\npip install pydantic        \n\n# uv\nuv add pydantic\n</code></pre></li> </ul> </li> <li> <p>decimal (m\u00f3dulo est\u00e1ndar)</p> <ul> <li><code>Decimal</code> se emplea para asegurar precisi\u00f3n en los resultados num\u00e9ricos.</li> </ul> </li> </ul>"},{"location":"clases/HistoryTableDB_doc/#relaciones","title":"Relaciones","text":"<ul> <li> <p>ORM o capa de persistencia (externa):</p> <ul> <li> <p><code>HistoryTableDB</code> no ejecuta operaciones SQL directamente.</p> </li> <li> <p>Otras clases o funciones deben mapear la instancia a sentencias <code>INSERT</code>/<code>SELECT</code> seg\u00fan el motor de base de datos (por ejemplo, usando SQLAlchemy, psycopg2 o cualquier otro driver).</p> </li> </ul> </li> <li> <p>Capa de negocio:</p> <ul> <li>Antes de persistir el resultado de una operaci\u00f3n, la l\u00f3gica de negocio crea una instancia de <code>HistoryTableDB</code> para validar y transportar datos.</li> </ul> </li> <li> <p>Capa de presentaci\u00f3n o servicio:</p> <ul> <li>Puede utilizar el m\u00e9todo <code>__str__</code> para renderizar el historial de operaciones en consola, logs o interfaces de usuario.</li> </ul> </li> </ul>"},{"location":"clases/HistoryTableDB_doc/#ejemplo-de-uso","title":"Ejemplo de uso","text":"<pre><code>from decimal import Decimal\nfrom history_db import HistoryTableDB\n\ndef guardar_operacion_en_db(history: HistoryTableDB):\n    \"\"\"\n    Funci\u00f3n que simula la inserci\u00f3n en la base de datos.\n    El c\u00f3digo real depender\u00e1 del ORM o del driver SQL que emplees.\n    \"\"\"\n    # Ejemplo de pseudoc\u00f3digo de persistencia:\n    # sql = \"INSERT INTO history_table (equation, result) VALUES (%s, %s)\"\n    # cursor.execute(sql, (history.equation, str(history.result)))\n    # db.commit()\n    print(f\"Insertando en DB: {history.equation} = {history.result}\")\n\nif __name__ == \"__main__\":\n    # 1. Definir ecuaci\u00f3n y calcular resultado\n    ecuacion = \"12 / 4 + 7\"\n    resultado = Decimal(12) / Decimal(4) + Decimal(7)  # Decimal('10')\n\n    # 2. Crear instancia de HistoryTableDB (Pydantic valida tipos)\n    registro = HistoryTableDB(equation=ecuacion, result=resultado)\n\n    # 3. Mostrar representaci\u00f3n en cadena\n    print(str(registro))  # Salida: \"12 / 4 + 7 = 10\"\n\n    # 4. Llamar a la funci\u00f3n que simula guardar en la base de datos\n    guardar_operacion_en_db(registro)\n</code></pre>"},{"location":"clases/HistoryTableDB_doc/#explicacion-del-ejemplo","title":"Explicaci\u00f3n del ejemplo","text":"<ol> <li> <p>Definici\u00f3n de la ecuaci\u00f3n:</p> <ul> <li>Se crea la variable <code>ecuacion</code> como una cadena de texto que representa la operaci\u00f3n.</li> <li>Se calcula <code>resultado</code> utilizando objetos <code>Decimal</code> para evitar errores de coma flotante.</li> </ul> </li> <li> <p>Instanciaci\u00f3n de <code>HistoryTableDB</code>:</p> <ul> <li>Al llamar a <code>HistoryTableDB(equation=ecuacion, result=resultado)</code>, Pydantic valida que:<ul> <li><code>equation</code> sea una cadena (<code>str</code>).</li> <li><code>result</code> sea un objeto <code>Decimal</code>.</li> </ul> </li> <li>Si los tipos no coinciden, Pydantic lanza una excepci\u00f3n <code>ValidationError</code>.</li> </ul> </li> <li> <p>Representaci\u00f3n en cadena:</p> <ul> <li><code>print(str(registro))</code> invoca el m\u00e9todo <code>__str__</code>, mostrando la operaci\u00f3n en formato legible (<code>\"12 / 4 + 7 = 10\"</code>).</li> </ul> </li> <li> <p>Persistencia simulada:</p> <ul> <li>La funci\u00f3n <code>guardar_operacion_en_db</code> recibe la instancia <code>registro</code> y simula la inserci\u00f3n en la base de datos.</li> <li>En un caso real, esta funci\u00f3n generar\u00eda y ejecutar\u00eda una sentencia SQL o usar\u00eda un ORM como SQLAlchemy para persistir el objeto en la tabla <code>history_table</code>.</li> </ul> </li> </ol>"},{"location":"clases/InterfaceCreator_doc/","title":"Clase <code>InterfaceCreator</code>","text":"<p>La clase <code>InterfaceCreator</code> es la responsable de construir y organizar la interfaz gr\u00e1fica completa de la calculadora. Act\u00faa como un orquestador, utilizando otras clases \"creadoras\" (<code>ScreensCreator</code> y <code>ButtonsCreator</code>) para generar los componentes de la interfaz y ensamblarlos en la ventana principal.</p>"},{"location":"clases/InterfaceCreator_doc/#funcionalidad","title":"Funcionalidad","text":"<ul> <li>Construcci\u00f3n de la Interfaz: Crea la ventana principal de la aplicaci\u00f3n (<code>QMainWindow</code>) y configura sus propiedades b\u00e1sicas como el t\u00edtulo, el tama\u00f1o y el color de fondo.</li> <li>Orquestaci\u00f3n de Creadores: Utiliza <code>ScreensCreator</code> para generar las pantallas de la calculadora y <code>ButtonsCreator</code> para generar los botones.</li> <li>Organizaci\u00f3n del Layout: Organiza las pantallas y los botones en un <code>QVBoxLayout</code> para que se muestren de forma ordenada en la ventana.</li> <li>Ejecuci\u00f3n de la Aplicaci\u00f3n: Proporciona el m\u00e9todo <code>run()</code> que inicia el bucle de eventos de Qt y muestra la interfaz al usuario.</li> </ul>"},{"location":"clases/InterfaceCreator_doc/#atributos","title":"Atributos","text":"Atributo Tipo Descripci\u00f3n <code>app</code> <code>QApplication</code> Instancia de la aplicaci\u00f3n Qt. <code>main_window</code> <code>QMainWindow</code> Ventana principal de la aplicaci\u00f3n. <code>display_value_1</code> <code>QLabel</code> Pantalla para el primer valor (obtenida de <code>ScreensCreator</code>). <code>display_value_2</code> <code>QLabel</code> Pantalla para el segundo valor (obtenida de <code>ScreensCreator</code>). <code>display_operator</code> <code>QLabel</code> Pantalla para el operador (obtenida de <code>ScreensCreator</code>). <code>display_result</code> <code>QLabel</code> Pantalla para el resultado (obtenida de <code>ScreensCreator</code>)."},{"location":"clases/InterfaceCreator_doc/#metodos","title":"M\u00e9todos","text":""},{"location":"clases/InterfaceCreator_doc/#_setup_window","title":"<code>_setup_window()</code>","text":"<p>Este m\u00e9todo privado se encarga de toda la l\u00f3gica de configuraci\u00f3n de la ventana. Crea el widget central, el layout principal, y luego llama a <code>ScreensCreator</code> y <code>ButtonsCreator</code> para que generen los componentes de la interfaz. Finalmente, a\u00f1ade estos componentes al layout principal.</p>"},{"location":"clases/InterfaceCreator_doc/#run","title":"<code>run()</code>","text":"<p>Este m\u00e9todo p\u00fablico inicia la aplicaci\u00f3n. Muestra la ventana principal y comienza el bucle de eventos de Qt, que se encarga de procesar las interacciones del usuario (como hacer clic en los botones).</p>"},{"location":"clases/InterfaceCreator_doc/#diagrama-uml","title":"Diagrama UML","text":""},{"location":"clases/ScreensCreator_doc/","title":"Clase <code>ScreensCreator</code>","text":"<p>La clase <code>ScreensCreator</code> se encarga de la creaci\u00f3n y gesti\u00f3n de las pantallas (objetos <code>QLabel</code>) de la interfaz de la calculadora. Utiliza el patr\u00f3n de dise\u00f1o Factory para crear las pantallas con diferentes estilos.</p>"},{"location":"clases/ScreensCreator_doc/#funcionalidad","title":"Funcionalidad","text":"<ul> <li>Creaci\u00f3n de Pantallas: Genera las cuatro pantallas de la calculadora: para el primer valor, el operador, el segundo valor y el resultado.</li> <li>Patr\u00f3n Factory: Utiliza una clase interna <code>ScreenFactory</code> para crear instancias de <code>QLabel</code> con una configuraci\u00f3n espec\u00edfica (estilo, alineaci\u00f3n, etc.). Esto permite desacoplar la creaci\u00f3n de las pantallas de su gesti\u00f3n.</li> <li>Gesti\u00f3n del Layout: Organiza las pantallas en un <code>QVBoxLayout</code> para que se muestren de forma vertical en la interfaz.</li> </ul>"},{"location":"clases/ScreensCreator_doc/#clases-internas","title":"Clases Internas","text":""},{"location":"clases/ScreensCreator_doc/#screenconfig","title":"<code>ScreenConfig</code>","text":"<p>Es un modelo de Pydantic que valida la configuraci\u00f3n de las pantallas, asegurando que los par\u00e1metros como el estilo y la alineaci\u00f3n sean correctos.</p>"},{"location":"clases/ScreensCreator_doc/#screenstate","title":"<code>ScreenState</code>","text":"<p>Es un modelo de Pydantic que gestiona el estado de las pantallas, almacenando los valores que se muestran en cada una de ellas.</p>"},{"location":"clases/ScreensCreator_doc/#screenfactory","title":"<code>ScreenFactory</code>","text":"<p>Es una clase que act\u00faa como una \"f\u00e1brica\" de pantallas. Se inicializa con un estilo CSS y su m\u00e9todo <code>create_screen()</code> devuelve un objeto <code>QLabel</code> configurado con ese estilo.</p>"},{"location":"clases/ScreensCreator_doc/#atributos","title":"Atributos","text":"Atributo Tipo Descripci\u00f3n <code>main_window</code> <code>QMainWindow</code> Ventana principal de la aplicaci\u00f3n. <code>display_value_1</code> <code>QLabel</code> Pantalla para el primer valor. <code>display_operator</code> <code>QLabel</code> Pantalla para el operador. <code>display_value_2</code> <code>QLabel</code> Pantalla para el segundo valor. <code>display_result</code> <code>QLabel</code> Pantalla para el resultado. <code>state</code> <code>ScreenState</code> Estado de las pantallas."},{"location":"clases/ScreensCreator_doc/#metodos","title":"M\u00e9todos","text":""},{"location":"clases/ScreensCreator_doc/#create_screens-tuple","title":"<code>create_screens() -&gt; tuple</code>","text":"<p>Este es el m\u00e9todo principal de la clase. Crea las cuatro pantallas de la calculadora utilizando las factor\u00edas de pantallas (<code>ScreenFactory</code>), las a\u00f1ade a un layout vertical y devuelve una tupla con el layout y las referencias a las cuatro pantallas. Esta tupla es utilizada por <code>InterfaceCreator</code> para configurar el resto de la aplicaci\u00f3n.</p>"},{"location":"clases/ScreensCreator_doc/#diagrama-uml","title":"Diagrama UML","text":""},{"location":"tests/test_ButtonsCreator_doc/","title":"Pruebas de <code>TestButtonsCreator</code>","text":"<p>La clase <code>TestButtonsCreator</code> contiene las pruebas unitarias para la clase <code>ButtonsCreator</code>. Estas pruebas se centran en verificar que la l\u00f3gica de la interfaz de usuario (los botones) funcione como se espera, utilizando mocks para simular los componentes de la interfaz gr\u00e1fica de PyQt.</p>"},{"location":"tests/test_ButtonsCreator_doc/#funcionalidad-de-las-pruebas","title":"Funcionalidad de las Pruebas","text":"<ul> <li>Simulaci\u00f3n de la Interfaz (Mocking): Se utiliza <code>pytest-mock</code> para crear \"mocks\" (simulacros) de los componentes de la interfaz gr\u00e1fica como <code>QWidget</code> y <code>QLabel</code>. Esto permite probar la l\u00f3gica de <code>ButtonsCreator</code> sin necesidad de crear una interfaz gr\u00e1fica real, lo que hace que las pruebas sean m\u00e1s r\u00e1pidas y fiables.</li> <li>Verificaci\u00f3n de la L\u00f3gica de los Botones: Se comprueba que al llamar a los m\u00e9todos de <code>ButtonsCreator</code> (como <code>insert_value</code>, <code>insert_operator</code>, etc.), el estado de la calculadora (<code>CalculatorState</code>) se actualice correctamente y que los <code>QLabel</code> (las pantallas) muestren la informaci\u00f3n esperada.</li> <li>Pruebas de Casos L\u00edmite: Se prueban escenarios como la inserci\u00f3n de m\u00faltiples puntos decimales, el c\u00e1lculo con valores vac\u00edos y la limpieza de la pantalla.</li> </ul>"},{"location":"tests/test_ButtonsCreator_doc/#metodos-de-prueba","title":"M\u00e9todos de Prueba","text":""},{"location":"tests/test_ButtonsCreator_doc/#test_insert_value","title":"<code>test_insert_value()</code>","text":"<p>Verifica que al insertar valores num\u00e9ricos, el <code>display_value_1</code> se actualice correctamente.</p>"},{"location":"tests/test_ButtonsCreator_doc/#test_insert_operator","title":"<code>test_insert_operator()</code>","text":"<p>Verifica que al insertar un operador, el <code>display_operator</code> se actualice correctamente.</p>"},{"location":"tests/test_ButtonsCreator_doc/#test_calculate_result","title":"<code>test_calculate_result()</code>","text":"<p>Verifica que al llamar a <code>calculate_result</code>, se realice el c\u00e1lculo correctamente, se actualice el <code>display_result</code> y se guarde la operaci\u00f3n en el historial.</p>"},{"location":"tests/test_ButtonsCreator_doc/#test_clear_screen","title":"<code>test_clear_screen()</code>","text":"<p>Verifica que al llamar a <code>clear_screen</code>, todos los <code>displays</code> se limpien y el estado de la calculadora se reinicie.</p>"},{"location":"tests/test_ButtonsCreator_doc/#test_delete_last_char","title":"<code>test_delete_last_char()</code>","text":"<p>Verifica que al llamar a <code>delete_last_char</code>, se elimine el \u00faltimo car\u00e1cter del valor actual.</p>"},{"location":"tests/test_ButtonsCreator_doc/#test_insert_decimal_point","title":"<code>test_insert_decimal_point()</code>","text":"<p>Verifica que solo se pueda insertar un punto decimal por n\u00famero.</p>"},{"location":"tests/test_ButtonsCreator_doc/#diagrama-uml-de-pruebas","title":"Diagrama UML de Pruebas","text":""},{"location":"tests/test_Calculator_doc/","title":"Pruebas de <code>TestCalculator</code>","text":"<p>La clase <code>TestCalculator</code> contiene las pruebas unitarias para la clase <code>Calculator</code>. El objetivo de estas pruebas es asegurar que todas las operaciones aritm\u00e9ticas (suma, resta, multiplicaci\u00f3n, divisi\u00f3n y porcentaje) funcionen correctamente y manejen los casos l\u00edmite de manera adecuada.</p>"},{"location":"tests/test_Calculator_doc/#funcionalidad-de-las-pruebas","title":"Funcionalidad de las Pruebas","text":"<ul> <li>Pruebas Parametrizadas: Se utiliza <code>pytest.mark.parametrize</code> para probar cada operaci\u00f3n con un conjunto diverso de datos, incluyendo n\u00fameros positivos, negativos, decimales y cero. Esto permite cubrir m\u00faltiples escenarios con un solo m\u00e9todo de prueba.</li> <li>Manejo de Errores: Se verifica que la operaci\u00f3n de divisi\u00f3n lance correctamente la excepci\u00f3n <code>ZeroDivisionError</code> cuando se intenta dividir por cero.</li> <li>Precisi\u00f3n Decimal: Se asegura que los c\u00e1lculos que involucran <code>Decimal</code> mantengan la precisi\u00f3n esperada.</li> </ul>"},{"location":"tests/test_Calculator_doc/#metodos-de-prueba","title":"M\u00e9todos de Prueba","text":""},{"location":"tests/test_Calculator_doc/#test_addvalue_1-value_2-expected","title":"<code>test_add(value_1, value_2, expected)</code>","text":"<p>Verifica que la suma de <code>value_1</code> y <code>value_2</code> sea igual a <code>expected</code>.</p>"},{"location":"tests/test_Calculator_doc/#test_subtractvalue_1-value_2-expected","title":"<code>test_subtract(value_1, value_2, expected)</code>","text":"<p>Verifica que la resta de <code>value_2</code> de <code>value_1</code> sea igual a <code>expected</code>.</p>"},{"location":"tests/test_Calculator_doc/#test_multiplyvalue_1-value_2-expected","title":"<code>test_multiply(value_1, value_2, expected)</code>","text":"<p>Verifica que la multiplicaci\u00f3n de <code>value_1</code> y <code>value_2</code> sea igual a <code>expected</code>.</p>"},{"location":"tests/test_Calculator_doc/#test_dividevalue_1-value_2-expected","title":"<code>test_divide(value_1, value_2, expected)</code>","text":"<p>Verifica que la divisi\u00f3n de <code>value_1</code> por <code>value_2</code> sea igual a <code>expected</code>.</p>"},{"location":"tests/test_Calculator_doc/#test_divide_by_zerovalue_1-value_2","title":"<code>test_divide_by_zero(value_1, value_2)</code>","text":"<p>Verifica que al intentar dividir <code>value_1</code> por cero (<code>value_2</code>), se lance la excepci\u00f3n <code>ZeroDivisionError</code>.</p>"},{"location":"tests/test_Calculator_doc/#test_percentvalue_1-value_2-expected","title":"<code>test_percent(value_1, value_2, expected)</code>","text":"<p>Verifica que el c\u00e1lculo del porcentaje de <code>value_1</code> con respecto a <code>value_2</code> sea igual a <code>expected</code>.</p>"},{"location":"tests/test_Calculator_doc/#diagrama-uml-de-pruebas","title":"Diagrama UML de Pruebas","text":""},{"location":"tests/test_HistoryManager_doc/","title":"Pruebas de <code>TestHistoryManager</code>","text":"<p>La clase <code>TestHistoryManager</code> contiene las pruebas unitarias para la clase <code>HistoryManager</code>. Estas pruebas aseguran que la interacci\u00f3n con la base de datos (crear la tabla, a\u00f1adir nuevos registros, eliminar el historial y obtener los \u00faltimos registros) funcione de manera fiable.</p>"},{"location":"tests/test_HistoryManager_doc/#funcionalidad-de-las-pruebas","title":"Funcionalidad de las Pruebas","text":"<ul> <li>Pruebas de Interacci\u00f3n con la Base de Datos: Se verifica que los m\u00e9todos de <code>HistoryManager</code> realicen las operaciones CRUD (Crear, Leer, Actualizar, Eliminar) en la base de datos de manera correcta.</li> <li>Uso de una Base de Datos de Prueba: Las pruebas se ejecutan en una base de datos de prueba separada para no afectar la base de datos de producci\u00f3n. Esto se logra modificando la ruta de la base de datos en la instancia de <code>HistoryManager</code> durante las pruebas.</li> <li>Verificaci\u00f3n del Patr\u00f3n Singleton: Se comprueba que <code>HistoryManager</code> siempre devuelva la misma instancia, asegurando que el patr\u00f3n Singleton est\u00e9 implementado correctamente.</li> </ul>"},{"location":"tests/test_HistoryManager_doc/#metodos-de-prueba","title":"M\u00e9todos de Prueba","text":""},{"location":"tests/test_HistoryManager_doc/#test_singleton_instance","title":"<code>test_singleton_instance()</code>","text":"<p>Verifica que al crear dos instancias de <code>HistoryManager</code>, ambas sean el mismo objeto.</p>"},{"location":"tests/test_HistoryManager_doc/#test_create_table","title":"<code>test_create_table()</code>","text":"<p>Verifica que el m\u00e9todo <code>create_table</code> se ejecute sin errores.</p>"},{"location":"tests/test_HistoryManager_doc/#test_new_history","title":"<code>test_new_history()</code>","text":"<p>Verifica que se pueda a\u00f1adir un nuevo registro al historial y que los datos se guarden correctamente.</p>"},{"location":"tests/test_HistoryManager_doc/#test_delete_history","title":"<code>test_delete_history()</code>","text":"<p>Verifica que al llamar a <code>delete_history</code>, todos los registros de la tabla se eliminen.</p>"},{"location":"tests/test_HistoryManager_doc/#test_get_last_records","title":"<code>test_get_last_records()</code>","text":"<p>Verifica que se puedan obtener los \u00faltimos registros del historial y que los datos sean correctos.</p>"},{"location":"tests/test_HistoryManager_doc/#diagrama-uml-de-pruebas","title":"Diagrama UML de Pruebas","text":""}]}